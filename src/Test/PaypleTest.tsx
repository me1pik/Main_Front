import React, { useState, useCallback, useEffect } from 'react';
import styled from 'styled-components';

declare global {
  interface Window {
    PaypleCpayAuthCheck?: (data: any) => void;
    PCD_PAY_CALLBACK?: (result: any) => void;
  }
}

const PaypleTest: React.FC = () => {
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [userInfo, setUserInfo] = useState<{
    userId: string;
    userName: string;
    userEmail: string;
  } | null>(null);
  const [cards, setCards] = useState<any[]>([]);

  // Î°úÍ∑∏Ïù∏ Ïú†Ï†Ä Ï†ïÎ≥¥ Î°úÎî©
  useEffect(() => {
    (async () => {
      try {
        const token = localStorage.getItem('accessToken');
        if (!token) throw new Error('ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§.');

        const res = await fetch('https://api.stylewh.com/user/me', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!res.ok) throw new Error('Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥ ÏöîÏ≤≠ Ïã§Ìå®');
        const data = await res.json();

        setUserInfo({
          userId: String(data.id),
          userName: data.name,
          userEmail: data.email,
        });
      } catch (e: any) {
        console.error('[üî•] Ïú†Ï†Ä Ï†ïÎ≥¥ Î°úÎî© Ïã§Ìå®', e);
        setError('Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    })();
  }, []);

  // Ïπ¥Îìú Î™©Î°ù Ï°∞Ìöå
  useEffect(() => {
    const fetchCards = async () => {
      try {
        const token = localStorage.getItem('accessToken');
        if (!token) return;

        const res = await fetch('https://api.stylewh.com/card/me', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (!res.ok) throw new Error('Ïπ¥Îìú Î™©Î°ù ÏöîÏ≤≠ Ïã§Ìå®');
        const data = await res.json();
        setCards(data.items);
      } catch (err) {
        console.error('[üî•] Ïπ¥Îìú Î™©Î°ù Î°úÎî© Ïã§Ìå®', err);
      }
    };

    fetchCards();
  }, []);

  // Ïπ¥Îìú Îì±Î°ù ÏöîÏ≤≠
  const registerCard = useCallback(async () => {
    setError(null);
    setSuccessMessage(null);
    if (!userInfo) return setError('Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');

    try {
      const params = new URLSearchParams({
        userId: userInfo.userId,
        userName: userInfo.userName,
        userEmail: userInfo.userEmail,
      });

      const res = await fetch(
        `https://api.stylewh.com/payple/card-register-data?${params}`,
        {
          method: 'GET',
          headers: {
            Authorization: `Bearer ${localStorage.getItem('accessToken') || ''}`,
          },
        }
      );
      if (!res.ok) throw new Error('Ïπ¥Îìú Îì±Î°ù Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠ Ïã§Ìå®');

      const data = await res.json();
      console.log('[‚úÖ Ïπ¥Îìú Îì±Î°ùÏö© Îç∞Ïù¥ÌÑ∞]', data);

      if (typeof window.PaypleCpayAuthCheck !== 'function') {
        console.error('[‚ùå Payple SDK Î°úÎî© Ïã§Ìå®]');
        throw new Error('Payple SDK Ï§ÄÎπÑ Ïò§Î•ò');
      }

      window.PaypleCpayAuthCheck({
        ...data,
        PCD_PAY_WORK: 'CERT',
        PCD_SIMPLE_FLAG: 'Y',
        PCD_PAYER_AUTHTYPE: 'pwd',
        PCD_PAY_GOODS: 'Ïπ¥Îìú Îì±Î°ù ÌÖåÏä§Ìä∏',
        PCD_PAY_TOTAL: 1000,
      });
    } catch (e: any) {
      console.error('[üî•] Ïπ¥Îìú Îì±Î°ù Ïò§Î•ò:', e);
      setError('Ïπ¥Îìú Îì±Î°ù Ï§ë Ïò§Î•ò Î∞úÏÉù: ' + e.message);
    }
  }, [userInfo]);

  // Í≤∞Ï†ú ÏöîÏ≤≠
  const payWithCard = async (payerId: string) => {
    try {
      const token = localStorage.getItem('accessToken');
      if (!token) return alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§');

      const res = await fetch('https://api.stylewh.com/payple/pay-with-registered-card', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          payerId,
          goods: 'ÌÖåÏä§Ìä∏ ÏÉÅÌíà',
          amount: 1000,
        }),
      });

      const data = await res.json();
      if (res.ok && data.PCD_PAY_RST === 'success') {
        alert(`‚úÖ Í≤∞Ï†ú ÏÑ±Í≥µ: ÏäπÏù∏Î≤àÌò∏ ${data.PCD_PAY_OID}`);
      } else {
        alert(`‚ùå Í≤∞Ï†ú Ïã§Ìå®: ${data.PCD_PAY_MSG || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
      }
    } catch (e) {
      console.error('[üî•] Í≤∞Ï†ú ÏöîÏ≤≠ Ïã§Ìå®:', e);
      alert('Í≤∞Ï†ú ÏöîÏ≤≠ Ï§ë Ïò§Î•ò Î∞úÏÉù');
    }
  };

  // ÏΩúÎ∞± Ï≤òÎ¶¨
  useEffect(() => {
    window.PCD_PAY_CALLBACK = async (result: any) => {
      console.log('[‚úÖ Payple Í≤∞Í≥º ÏàòÏã†]', result);
      if (!userInfo) return setError('Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');

      try {
        const res = await fetch(
          'https://api.stylewh.com/payple/simple-pay-result',
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              userId: userInfo.userId,
              payerId: result.PCD_PAYER_ID,
              payReqKey: result.PCD_PAY_REQKEY,
              authKey: result.PCD_AUTH_KEY,
              cardName: result.PCD_PAY_CARDNAME ?? '',
              cardNumber: result.PCD_PAY_CARDNUM ?? '',
              goods: 'Ïπ¥Îìú Îì±Î°ù',
              amount: 0,
            }),
          }
        );
        const data = await res.json();
        if (!res.ok) throw new Error(data.message || 'Ïπ¥Îìú Îì±Î°ù Ïã§Ìå®');
        setSuccessMessage(data.message || 'Ïπ¥Îìú Îì±Î°ù ÏôÑÎ£å');
        window.location.href = 'https://me1pik.com/payment-method';
      } catch (e: any) {
        console.error('[üî•] ÏÑúÎ≤Ñ Ï†ÑÏÜ° Ïò§Î•ò:', e);
        setError('Î∞±ÏóîÎìú Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: ' + e.message);
      }
    };
    return () => {
      delete window.PCD_PAY_CALLBACK;
    };
  }, [userInfo]);

  return (
    <Container>
      <Title>Payple Ïπ¥Îìú Îì±Î°ù Î∞è Í≤∞Ï†ú</Title>
      <Button disabled={!userInfo} onClick={registerCard}>
        Ïπ¥Îìú Îì±Î°ù
      </Button>

      {cards.length > 0 && (
        <CardSection>
          <h3>Îì±Î°ùÎêú Ïπ¥Îìú Î™©Î°ù</h3>
          {cards.map((card) => (
            <CardBox key={card.cardId}>
              <div>{card.cardName} - {card.cardNumber}</div>
              <CardButton onClick={() => payWithCard(card.payerId)}>
                Ïù¥ Ïπ¥ÎìúÎ°ú Í≤∞Ï†ú
              </CardButton>
            </CardBox>
          ))}
        </CardSection>
      )}

      {error && <Message type="error">{error}</Message>}
      {successMessage && <Message>{successMessage}</Message>}
    </Container>
  );
};

export default PaypleTest;

const Container = styled.div`
  max-width: 480px;
  margin: 60px auto;
  padding: 32px;
  border-radius: 12px;
  background: #fff8f0;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  text-align: center;
`;
const Title = styled.h1`
  font-size: 1.8rem;
  font-weight: 600;
  color: #333;
  margin-bottom: 24px;
`;
const Button = styled.button<{ disabled?: boolean }>`
  padding: 14px 28px;
  font-size: 1rem;
  font-weight: 500;
  background: #fa9a00;
  color: #fff;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.2s;
  &:hover {
    background: #e08800;
  }
  &:disabled {
    background: #ccc;
    cursor: not-allowed;
  }
`;
const CardSection = styled.div`
  margin-top: 32px;
`;
const CardBox = styled.div`
  margin: 12px 0;
  padding: 12px;
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 8px;
`;
const CardButton = styled.button`
  margin-top: 8px;
  padding: 10px 18px;
  background: #2e7d32;
  color: #fff;
  border: none;
  border-radius: 6px;
  font-weight: 500;
  cursor: pointer;
  &:hover {
    background: #256528;
  }
`;
const Message = styled.p<{ type?: 'error' }>`
  margin-top: 20px;
  font-size: 0.95rem;
  color: ${({ type }) => (type === 'error' ? '#d32f2f' : '#2e7d32')};
  font-weight: 500;
`;
